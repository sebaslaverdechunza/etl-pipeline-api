
# ------------------------------------------
# ¬øQu√© hace este archivo?
# Este m√≥dulo contiene la funci√≥n que se encarga de extraer datos
# desde una API REST autenticada usando un header 'x-api-key'.
# Se usa la librer√≠a `requests` para las solicitudes HTTP
# y `tenacity` para manejar reintentos autom√°ticos ante errores temporales.
# ------------------------------------------


import requests # Para hacer solicitudes HTTP a la API
from tenacity import retry, stop_after_attempt, wait_fixed  # Para manejar reintentos autom√°ticos

# Decorador que reintenta la funci√≥n hasta 3 veces si falla, esperando 2 segundos entre cada intento
@retry(stop=stop_after_attempt(3), wait=wait_fixed(2))

def fetch_from_api(url, api_key):
    """
    Realiza una solicitud GET a la API especificada en `url` usando el token `api_key`.

    Par√°metros:
        url (str): Endpoint al que se desea hacer la solicitud.
        api_key (str): Clave API usada para autenticaci√≥n en el header.

    Retorna:
        dict: La respuesta JSON de la API convertida a un diccionario de Python.
    """
    # Construcci√≥n del header de autenticaci√≥n
    headers = {
        "x-api-key": api_key
    }
    print(f"üì° Llamando a: {url}") # Log de seguimiento para saber qu√© endpoint se est√° consumiendo
    
    # Realiza la solicitud GET con el header autenticado
    response = requests.get(url, headers=headers)

    # Si la respuesta no es exitosa, lanza una excepci√≥n personalizada con detalles
    if response.status_code != 200:
        raise Exception(f"Error al consultar {url} - C√≥digo: {response.status_code} - Respuesta: {response.text}")
    
    # Devuelve el cuerpo de la respuesta como JSON (estructura tipo dict)
    return response.json()  # ‚úÖ Esta l√≠nea es clave
